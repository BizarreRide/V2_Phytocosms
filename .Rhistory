phyto[is.na(phyto)] <- 0
melt(phyto)
melt(phyto, id.vars=rownames(phyto))
rownames(phyto)
?melt
melt(phyto, measure.vars=rownames(phyto))
melt(phyto, measure.vars=factor(rownames(phyto)))
phyto$ID <- factor(rownames(phyto))
melt(phyto, id.vars=ID)
melt(phyto, id.vars="ID")
phyto.melt <- melt(phyto, id.vars="ID")
ggplot(phyto) + geom_line()
ggplot(phyto.melt, aes(y=ID, x=value)) + geom_line()
plot(phyto)
ggplot(phyto.melt, aes(y=ID, x=variable)) + geom_line()
ggplot(phyto.melt, aes(y=ID, x=variable)) + geom_point()
plot(t(phyto))
t(phyto)
phyto.melt <- melt(phyto, measure.vars="ID")
phyto.melt
ggplot(phyto.melt, aes(y=ID, x=variable)) + geom_point()
phyto.melt <- melt(phyto, id.vars="ID")
ggplot(phyto.melt, aes(y=ID, x=variable)) + geom_point()
ggplot(phyto.melt, aes(y=value, x=variable)) + geom_point()
ggplot(t(phyto), aes(y=ID, x=variable)) + geom_line()
ggplot(t(phyto), aes(y=ID, x=variable)) + geom_line(group=ID)
ggplot(t(phyto), aes(y=ID, x=variable, group=ID)) + geom_line(group=ID)
ggplot(t(phyto), aes(y=ID, x=variable, group=ID)) + geom_point()
ggplot(phyto.melt, aes(y=value, x=variable)) + geom_line()
ggplot(phyto.melt, aes(y=value, x=variable)) + geom_line(, group=ID)
ggplot(phyto.melt, aes(y=value, x=variable)) + geom_line(group=ID)
ggplot(phyto.melt, aes(y=value, x=variable)) + geom_line(aes(group=ID))
phyto.z <- data.frame(phyto(soil))
phyto.z <- data.frame(scale(phyto))
phyto.z <- data.frame(scale(phyto[,-"ID"]))
phyto[,-"ID"]
phyto[,!"ID"]
phyto[-"ID"]
phyto[!"ID"]
phyto["ID"]
phyto[-c("ID")]
phyto[!"ID"]
phyto[,!"ID"]
!phyto["ID"]
phyto["ID"]
phyto!["ID"]
phyto[=="ID"]
phyto[,!="ID"]
phyto[,grep("ID")]
phyto[grep("ID")]
phyto[grep(ID)]
?grep()
phyto[,-grep("ID", names(phyto))]
phyto <- phyto[,-grep("ID", names(phyto))]
phyto.z <- data.frame(scale(phyto[,-"ID"]))
phyto.z <- data.frame(scale(phyto))
phyto.melt <- melt(phyto, id.vars="ID")
phyto <- phyto[,-grep("ID", names(phyto))]
phyto.z <- data.frame(scale(phyto))
phyto.z$ID <- factor(rownames(phyto.z))
phyto.melt <- melt(phyto.z, id.vars="ID")
ggplot(phyto.melt, aes(y=value, x=variable)) + geom_line(aes(group=ID))
phyto.melt <- melt(phyto.z, id.vars="ID")
ggplot(phyto.melt, aes(y=value, x=variable)) + geom_line(aes(group=ID))
View(phyto.melt)
source("Analysis/V2_RequiredPackages.R") #packages agricolae and vegan are colliding
source("Data/V2_LoadData.R")
# Sample 11 has strange Cmic values
full.frame <- full.frame[-11,]
# Divide data frame in subsets ####
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
soil <- full.frame[,c(12,14:18)] # abiotic soil measures, including Cmic
colnames(soil)[2:3] <- c("carbon","Nitrogen")
bio <- full.frame[,8:12] # biotic soil characteristics
env <- full.frame[,c(8:12,14:18)] # the same as phyto
groups <- full.frame[,1:7]
phyto <- cbind(bio, soil[,2:6])  # merge of bio and soil variables
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Lineplot for each individual samples and its according measurement
phyto[is.na(phyto)] <- 0
phyto$ID <- factor(rownames(phyto))
phyto.melt <- melt(phyto, id.vars="ID")
ggplot(phyto.melt, aes(y=value, x=variable)) + geom_line(aes(group=ID))
phyto <- phyto[,-grep("ID", names(phyto))]
phyto.z <- data.frame(scale(phyto))
phyto.z$ID <- factor(rownames(phyto.z))
phyto.melt <- melt(phyto.z, id.vars="ID")
ggplot(phyto.melt, aes(y=value, x=variable)) + geom_line(aes(group=ID))
ggplot(phyto.melt, aes(y=value, x=variable)) + geom_line(aes(group=ID, col=groups$treat))
groups$treat
groups.melt <- melt(groups, id.vars=as.factor(rownames(groups)))
as.factor(rownames(groups))
groups.melt <- melt(groups, id.vars=rownames(groups))
groups$ID <- factor(rownames(groups))
groups.melt <- melt(groups, id.vars="ID")
groups$ID <- factor(rownames(groups))
groups.melt <- melt(groups, id.vars="ID")
groups$ID <- factor(rownames(groups))
groups <- full.frame[,1:7]
factor(rownames(groups))
groups$ID <- factor(rownames(groups))
View(groups)
groups.melt <- melt(groups, id.vars="ID")
melt(groups, id.vars="ID")
ggplot(phyto.melt, aes(y=value, x=variable)) + geom_line(aes(group=ID, col=groups.melt$treat))
phyto <- cbind(groups,bio, soil[,2:6])  # merge of bio and soil variables
phyto[is.na(phyto)] <- 0
phyto.melt <- melt(phyto, id.vars=1:7)
source("Analysis/V2_RequiredPackages.R") #packages agricolae and vegan are colliding
phyto.melt <- melt(phyto, id.vars=1:7)
View(phyto.melt)
ggplot(phyto.melt, aes(y=value, x=variable)) + geom_line(aes(group=ID))
phyto.z <- data.frame(scale(phyto[,7:17]))
View(phyto.z)
phyto.z <- data.frame(cbind(phyto[,1:7],scale(phyto[,8:17])))
View(phyto.z)
ggplot(phyto.melt, aes(y=value, x=variable)) + geom_line(aes(group=ID, col=treat))
phyto.melt <- melt(phyto.z, id.vars=1:7)
ggplot(phyto.melt, aes(y=value, x=variable)) + geom_line(aes(group=ID, col=treat))
ggplot(phyto.melt[,!variable=="Ltbm"], aes(y=value, x=variable)) + geom_line(aes(group=ID, col=treat))
ggplot(phyto.melt[,!"variable"=="Ltbm"], aes(y=value, x=variable)) + geom_line(aes(group=ID, col=treat))
phyto.melt[,!"variable"=="Ltbm"]
ggplot(phyto.melt[!"variable"=="Ltbm",], aes(y=value, x=variable)) + geom_line(aes(group=ID, col=treat))
phyto.melt[!"variable"=="Ltbm",]
phyto.melt[!.$variable=="Ltbm",]
phyto.melt[!$variable=="Ltbm",]
phyto.melt[variable!="Ltbm",]
phyto.melt[.$variable!="Ltbm",]
phyto.melt[phyto.melt$variable!="Ltbm",]
phyto.melt[*$variable!="Ltbm",]
phyt.z[complete.cases(phyto.z),]
phyto.z[complete.cases(phyto.z),]
phyto <- cbind(groups,bio, soil[,2:6])  # merge of bio and soil variables
phyto[complete.cases(phyto),]
phyto[complete.cases(phyto$Ltbm),]
View(phyto)
phyto.melt[!(variable!="Ltbm"),]
phyto.melt[!(variable=="Ltbm"),]
phyto.melt[-which(variable=="Ltbm"),]
subset(phyto.melt,variable=="Ltbm")
subset(phyto.melt,variable!="Ltbm")
subset(phyto.melt,variable!=c("Ltbm","col"))
subset(phyto.melt,variable!="Ltbm"))
subset(phyto.melt,variable!="Ltbm")
?subset()
subset(phyto.melt,variable!=grepl("Ltbm","col"))
subset(phyto.melt,variable!=("Ltbm","col"))
subset(phyto.melt,variable!="Ltbm"|"col"))
subset(phyto.melt,variable!="Ltbm"|"col")
subset(phyto.melt,variable!=c("Ltbm"|"col"))
subset(phyto.melt,variable %in% c("Ltbm","col"))
subset(phyto.melt,variable !%in% c("Ltbm","col"))
subset(phyto.melt,variable %!in% c("Ltbm","col"))
subset(phyto.melt,!variable %in% c("Ltbm","col"))
ggplot(subset(phyto.melt,!variable %in% c("Ltbm","col")), aes(y=value, x=variable)) + geom_line(aes(group=ID, col=treat))
subset(phyto,!colnames("Ltbm","col"))
subset(phyto,!names("Ltbm","col"))
names(phyto)
subset(phyto,-c("Ltbm","col"))
subset(phyto,!c("Ltbm","col"))
phyto[,"Ltbm"]
phyto[,c("Ltbm","col")]
phyto[,-c("Ltbm","col")]
phyto[,!c("Ltbm","col")]
phyto[,grep("Ltbm","col")]
phyto[,c("Ltbm","col")]
phyto[,-c("Ltbm","col")]
phyto[,!=c("Ltbm","col")]
phyto![,c("Ltbm","col")]
!phyto[,c("Ltbm","col")]
phyto[,c("Ltbm","col")]
phyto-phyto[,c("Ltbm","col")]
phyto[c("Ltbm","col")]
phyto[-c("Ltbm","col")]
phyto[!c("Ltbm","col")]
phyto[c("Ltbm","col")]
phyto[grep(c("Ltbm","col"),names(phyto))]
phyto[,grep(c("Ltbm","col"),names(phyto))]
phyto[,-grep(c("Ltbm","col"),names(phyto))]
phyto[,-grep(list("Ltbm","col"),names(phyto))]
phyto[list("Ltbm","col")]
phyto[,list("Ltbm","col")]
phyto[c("Ltbm","col")]
phyto[!names(phyto) %in% c("Ltbm","col")]
phyto[complete.cases(phyto$Ltbm),]
phyto[complete.cases(phyto$Ltbm),"col"]
phyto[complete.cases(phyto$Ltbm),-"col"]
phyto[complete.cases(phyto$Ltbm),!"col"]
phyto[complete.cases(phyto$Ltbm),!="col"]
phyto[complete.cases(phyto$Ltbm),=="col"]
phyto[complete.cases(phyto$Ltbm),==col]
phyto[complete.cases(phyto$Ltbm),col]
x <- c("Ltbm","col")
phyto[,-x]
phyto[-x]
phyto[!x]
phyto[,!x]
phyto![,x]
phyto![x]
phyto[,!names(phyto) %in% c("Ltbm","col")]
phyto[!names(phyto) %in% c("Ltbm","col")]
phyto[complete.cases(phyto$Ltbm),!names(phyto) %in% "col"]
phyto[complete.cases(phyto$col),!names(phyto) %in% "Ltbm"]
phyto <- subset(phyto,!c("Ltbm","col"))
phyto <- phyto[!names(phyto) %in% c("Ltbm","col")]
phyto.melt <- melt(phyto, id.vars=1:7)
ggplot(phyto.melt, aes(y=value, x=variable)) + geom_line(aes(group=ID, col=treat))
phyto.z <- data.frame(cbind(phyto[,1:7],scale(phyto[,8:15])))
phyto.melt <- melt(phyto.z, id.vars=1:7)
ggplot(phyto.melt, aes(y=value, x=variable)) + geom_line(aes(group=ID, col=treat))
phyto <- phyto[,8:15]
phyto[is.na(phyto)] <- 0
phyto.pca <- vegan::rda(phyto, scale=TRUE)  #, scale=TRUE)
cleanplot.pca(phyto.pca)
phyto.ward <- hclust(dist(scale(phyto)), "ward.D")
plot(phyto.ward)
gr <- cutree(phyto.ward, k=4)
grl <- levels(factor(gr))
# Get the site scores, scaling 1
sit.sc1 <- scores(phyto.pca, display="wa", scaling=1)
# Plot the sites with cluster symbols and colours (scaling 1)
par(mfrow=c(1,1))
phyto.p1 <- plot(phyto.pca, display="wa", scaling=1, type="n", main="PCA correlation + clusters")
abline(v=0, lty="dotted")
abline(h=0, lty="dotted")
for(i in 1:length(grl)) {
points(sit.sc1[gr==i,], pch=(14+i), cex=2, col=i+1)
}
text(sit.sc1, row.names(phyto), cex=0.7, pos=3)
# add the dendrogram
ordicluster(phyto.p1, phyto.ward, col="dark grey")
legend(locator(1), paste("Group", c(1:length(grl))), pch=14+c(1:length(grl)), col=14+c(1:length(grl)), pt.cex=2)
str(groups)
groups$cosm <- factor(groups$cosm)
phyto.rda <- rda(phyto ~ ., scale=TRUE,groups[,-c(1,5,6,7)])
summary(phyto.rda)
coef(phyto.rda)
plot(phyto.rda, scaling=1, main="Distance Triplot RDA")
phyto.sc <- scores(phyto.rda, choices=1:2, scaling=1, display="sp")
arrows(0,0, phyto.sc[,1], phyto.sc[,2], length=0, lty=1, col="red")
# Scaling 2: correlation triplot
plot(phyto.rda, main="Correlation Triplot RDA")
phyto2.sc <- scores(phyto.rda, choices=1:2, display="sp")
arrows(0,0, phyto2.sc[,1], phyto2.sc[,2], length=0, lty=1, col="red")
anova.cca(phyto.rda, step=1000)
anova.cca(phyto.rda, by="axis", step=1000)
(R2 <- RsquareAdj(phyto.rda)$r.squared)
(R2 <- RsquareAdj(phyto.rda)$adj.r.squared)
View(groups)
source("Analysis/V2_RequiredPackages.R") #packages agricolae and vegan are colliding
source("Data/V2_LoadData.R")
soil <- full.frame[,c(12,14:18)] # abiotic soil measures, including Cmic
colnames(soil)[2:3] <- c("carbon","Nitrogen")
bio <- full.frame[,8:12] # biotic soil characteristics
env <- full.frame[,c(8:12,14:18)] # the same as env
groups <- full.frame[,1:7]
View(env)
env <- cbind(groups,bio, soil[,2:6])  # merge of bio and soil variables
View(env)
View(full.frame)
ggplot(cmic2, aes(x=treat, y=Cmic), labeller=label_parsed) +
geom_bar(fill="light blue", col="black", lwd=0.2, stat="identity") +
ylab(expression(paste("µg-C /g soil"))) +
xlab("Pseudo-Replicates") +
ggtitle(expression(paste(""))) +
facet_grid(soil~plant, labeller=label_parsed) +
mytheme
View(full.frame)
View(env)
View(full.frame)
View(env)
View(full.frame)
View(env)
env <- cbind(groups,env)  # merge of bio and soil variables
env <- full.frame[,c(8:12,14:18)] # the same as env
env <- cbind(groups,env)  # merge of bio and soil variables
env2 <- cbind(groups,env)  # merge of bio and soil variables
env <- full.frame[,c(8:12,14:18)] # the same as env
env2 <- env2[!names(env2) %in% c("Ltbm","col")] # exclude Lt biomass and collembolans
env2.melt <- melt(env2, id.vars=1:7)
ggplot(env2.melt, aes(y=value, x=variable)) + geom_line(aes(group=ID, col=treat))
env <- full.frame[,c(8:12,14:18)] # the same as env
groups <- full.frame[,1:7]
env2 <- cbind(groups,env)  # merge of bio and soil variables
env2 <- env2[!names(env2) %in% c("Ltbm","col")] # exclude Lt biomass and collembolans
env2.melt <- melt(env2, id.vars=1:7)
ggplot(env2.melt, aes(y=value, x=variable)) + geom_line(aes(group=ID, col=treat))
env2.z <- data.frame(cbind(env2[,1:7],scale(env2[,8:15])))
env2.melt <- melt(env2.z, id.vars=1:7)
ggplot(env2.melt, aes(y=value, x=variable)) + geom_line(aes(group=ID, col=treat))
View(env)
env <- env[,c(8:15,!names(env2) %in% c("Ltbm","col"))]
env <- env[,!names(env) %in% c("Ltbm","col")]
env.pca <- vegan::rda(env, scale=TRUE)
cleanplot.pca(env.pca)
source("Analysis/evplot.R")
source("Analysis/cleanplot.pca.R")
cleanplot.pca(env.pca)
env.Lt.pca <- vegan::rda(env.Lt, scale=TRUE)
env.Lt <- env[complete.cases(env$Ltbm),!names(env) %in% "col"] # subset only L. terrestris biomass without NAs
env.col <- env[complete.cases(env$col),!names(env) %in% "Ltbm"] # subset only collembolan counts without NAs
env <- full.frame[,c(8:12,14:18)] # the same as env
env.Lt <- env[complete.cases(env$Ltbm),!names(env) %in% "col"] # subset only L. terrestris biomass without NAs
env.col <- env[complete.cases(env$col),!names(env) %in% "Ltbm"] # subset only collembolan counts without NAs
env.total <- env[is.na(env)] <- 0 # All NAs get 0, in particular this refers to abundance and weights of soil organisms [No weight = zero weight????]
env.Lt.pca <- vegan::rda(env.Lt, scale=TRUE)
env.col.pca <- vegan::rda(env.col, scale=TRUE)
cleanplot.pca(env.Lt.pca)
cleanplot.pca(env.col.pca)
View(full.frame)
eigenvalues <- env.pca$CA$eig
evplot(eigenvalues) # One interprets only the axes whose eigenvalues are larger than the length of corresponding piece of the sticks
plotPCA <- function(x, nGroup) {
n <- ncol(x)
if(!(n %in% c(2,3))) { # check if 2d or 3d
stop("x must have either 2 or 3 columns")
}
fit <- hclust(dist(x), method="complete") # cluster
groups <- cutree(fit, k=nGroup)
if(n == 3) { # 3d plot
plot3d(x, col=groups, type="s", size=1, axes=F)
axes3d(edges=c("x--", "y--", "z"), lwd=3, axes.len=2, labels=FALSE)
grid3d("x")
grid3d("y")
grid3d("z")
} else { # 2d plot
maxes <- apply(abs(x), 2, max)
rangeX <- c(-maxes[1], maxes[1])
rangeY <- c(-maxes[2], maxes[2])
plot(x, col=groups, pch=19, xlab=colnames(x)[1], ylab=colnames(x)[2], xlim=rangeX, ylim=rangeY)
lines(c(0,0), rangeX*2)
lines(rangeY*2, c(0,0))
}
}
plotPCA(env.pca$x[,1:3],4)
env.pca <- prcomp(env, scale=TRUE)
fit <- hclust(dist(env.pca$x[,1:2]), method="complete")
plot(fit)
par(mfrow=c(1,1))
fit <- hclust(dist(env.pca$x[,1:2]), method="complete")
plot(fit)
groups.env <- cutree(fit, k=4)
plot(groups.env)
plotPCA(soil.pca$x[,1:3],4)
plotPCA(env.pca$x[,1:3],4)
cleanplot.pca(env.pca)
env.pca <- vegan::rda(env, scale=TRUE)
cleanplot.pca(env.pca)
env.pca <- prcomp(env, scale=TRUE)
biplot(env.pca)
par(mfrow=c(1,1))
biplot(env.pca)
env <- env[,!names(env) %in% c("Ltbm","col")]
env.pca <- vegan::rda(env, scale=TRUE)
eigenvalues <- env.pca$CA$eig
evplot(eigenvalues) # One interprets only the axes whose eigenvalues are larger than the length of corresponding piece of the sticks
# three Axes are important
cleanplot.pca(env.pca)
env.pca <- prcomp(env, scale=TRUE)
par(mfrow=c(1,1))
fit <- hclust(dist(env.pca$x[,1:2]), method="complete")
plot(fit)
groups.env <- cutree(fit, k=4)
biplot(env.pca)
plotPCA(env.pca$x[,1:3],4)
env.pca <- vegan::rda(env, scale=TRUE)
env.pca2 <- prcomp(env, scale=TRUE)
env.pca <- vegan::rda(env, scale=TRUE)
summary(env.pca)
summary(env.pca, scaling=1)
if (require("multcomp")) {
amod <- aov(cmic.means ~ cmic.int, data = cmic.data2)
wht <- glht(amod, linfct = mcp(cmic.int = "Tukey"))
fortify(wht)
ggplot(wht, aes(lhs, estimate)) + geom_point()
CI <- confint(wht)
fortify(CI)
ggplot(CI, aes(lhs, estimate, ymin = lwr, ymax = upr)) +
geom_pointrange()
fortify(summary(wht))
ggplot(mapping = aes(lhs, estimate)) +
geom_linerange(aes(ymin = lwr, ymax = upr), data = CI) +
geom_point(aes(size = p), data = summary(wht)) +
scale_size(trans = "reverse")
cld <- cld(wht)
fortify(cld)
}
cmic <- read.delim("Data/V2_cmic.txt")
cmic2 <- cmic[!(cmic$plant=="Wp"),] # exclude "Without Plant"
cmic2$ID1  <- as.factor(rep(c(1:15),16)) #  Id for ???
cmic2$treat <- factor(cmic2$treat, levels=c("Lt","Fc","Mix","Control")) # reorder factor levels
# Boxplot for Cmic
ggplot(cmic2, aes(x= ID1, y=Cmic),group=cosm, labeller=label_parsed) +
geom_bar(fill="light blue", col="black", lwd=0.2, stat="identity") +
ylab(expression(paste("µg-C /g soil"))) +
xlab("Pseudo-Replicates") +
ggtitle(expression(paste("Microbial Biomass - Outlier search"))) +
facet_grid(soil~plant+treat, labeller=label_parsed) +
mytheme
# Boxplot for Airflow
ggplot(cmic2, aes(x= ID1, y=Airflow),group=cosm, labeller=label_parsed) +
geom_bar(fill="light blue", col="black", lwd=0.2, stat="identity") +
ylab(expression(paste("µg-C /g soil"))) +
xlab("Pseudo-Replicates") +
coord_cartesian(ylim=c(130,190)) +
ggtitle(expression(paste("Microbial Biomass - Outlier search"))) +
facet_grid(soil~plant+treat, labeller=label_parsed) +
mytheme
library(ggplot2)
library(reshape2)
library(plyr)
library(MethComp)
#library(agricolae)
library(foreign)
library(multcomp)
library(gridExtra)
library(extrafont)
library(effects)
library(MASS)
library(vegan)
library(mvnormtest)
library(splitstackshape)
library(FactoMineR)
library(rgl)
cmic2 <- cmic[!(cmic$plant=="Wp"),] # exclude "Without Plant"
cmic2$ID1  <- as.factor(rep(c(1:15),16)) #  Id for ???
cmic2$treat <- factor(cmic2$treat, levels=c("Lt","Fc","Mix","Control")) # reorder factor levels
# Boxplot for Cmic
ggplot(cmic2, aes(x= ID1, y=Cmic),group=cosm, labeller=label_parsed) +
geom_bar(fill="light blue", col="black", lwd=0.2, stat="identity") +
ylab(expression(paste("µg-C /g soil"))) +
xlab("Pseudo-Replicates") +
ggtitle(expression(paste("Microbial Biomass - Outlier search"))) +
facet_grid(soil~plant+treat, labeller=label_parsed) +
mytheme
# Boxplot for Airflow
ggplot(cmic2, aes(x= ID1, y=Airflow),group=cosm, labeller=label_parsed) +
geom_bar(fill="light blue", col="black", lwd=0.2, stat="identity") +
ylab(expression(paste("µg-C /g soil"))) +
xlab("Pseudo-Replicates") +
coord_cartesian(ylim=c(130,190)) +
ggtitle(expression(paste("Microbial Biomass - Outlier search"))) +
facet_grid(soil~plant+treat, labeller=label_parsed) +
mytheme
# How will Airflow be used in data processing? or is it even incorporated yet?
# Eliminate Outliers
a <- which(cmic2$Cmic<200)
a <- c(a,with(cmic2[(cmic2$treat=="Lt" & cmic2$plant=="Zm" & cmic2$soil=="Loam"),], which(cmic2$Cmic==min(Cmic))))
cmic2 <- cmic2[-a,]; rm(a)
cmic2 <- cmic2[order(cmic2$soil,cmic2$cosm),] # reorder dataset
# Cmic values from soil at the start of the experiment
cmic2 <- aggregate(Cmic~cosm+soil+plant+treat, cmic2, mean)
a <- with(cmic[(cmic$plant=="Wp"),], tapply(Cmic, list(soil,treat), mean))[1,6]
b <- with(cmic[(cmic$plant=="Wp"),], tapply(Cmic, list(soil,treat), mean))[2,6]
# Cmic values from soil from pure soil controls (n=1)
cmic2$Cmic.start <- rep(c(a,b), each=40)
a <- with(cmic[(cmic$plant=="Wp"),], tapply(Cmic, list(soil,treat), mean))[1,2]
b <- with(cmic[(cmic$plant=="Wp"),], tapply(Cmic, list(soil,treat), mean))[2,2]
cmic2$Cmic.control2 <- rep(c(a,b), each=40)
rm(a,b)
# stacked bars for values of all 5 replicates per treatment
ggplot(cmic2, aes(x=treat, y=Cmic), labeller=label_parsed) +
geom_bar(fill="light blue", col="black", lwd=0.2, stat="identity") +
ylab(expression(paste("µg-C /g soil"))) +
xlab("Pseudo-Replicates") +
ggtitle(expression(paste(""))) +
facet_grid(soil~plant, labeller=label_parsed) +
mytheme
View(cmic2)
amod <- aov(cmic ~ treat, data = cmic2)
amod <- aov(Cmic ~ treat, data = cmic2)
wht <- glht(amod, linfct = mcp(cmic.int = "Tukey"))
wht <- glht(amod, linfct = mcp(treat = "Tukey"))
fortify(wht)
if (require("multcomp")) {
amod <- aov(Cmic ~ treat, data = cmic2)
wht <- glht(amod, linfct = mcp(treat = "Tukey"))
fortify(wht)
ggplot(wht, aes(lhs, estimate)) + geom_point()
CI <- confint(wht)
fortify(CI)
ggplot(CI, aes(lhs, estimate, ymin = lwr, ymax = upr)) +
geom_pointrange()
fortify(summary(wht))
ggplot(mapping = aes(lhs, estimate)) +
geom_linerange(aes(ymin = lwr, ymax = upr), data = CI) +
geom_point(aes(size = p), data = summary(wht)) +
scale_size(trans = "reverse")
cld <- cld(wht)
fortify(cld)
}
fortify(summary(wht))
fortify(wht)
ggplot(mapping = aes(lhs, estimate)) +
geom_linerange(aes(ymin = lwr, ymax = upr), data = CI) +
geom_point(aes(size = p), data = summary(wht)) +
scale_size(trans = "reverse")
ggplot(CI, aes(lhs, estimate, ymin = lwr, ymax = upr)) +
geom_pointrange()
CI <- confint(wht)
fortify(CI)
ggplot(CI, aes(lhs, estimate, ymin = lwr, ymax = upr)) +
geom_pointrange()
fortify(wht)
ggplot(wht, aes(lhs, estimate)) + geom_point()
fortify(amod)
fortify(summary(amod))
amod
ggplot(mapping = aes(lhs, estimate)) +
geom_linerange(aes(ymin = lwr, ymax = upr), data = CI) +
geom_point(aes(size = p), data = summary(wht)) +
scale_size(trans = "reverse")
